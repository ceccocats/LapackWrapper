/*--------------------------------------------------------------------------*\
 |                                                                          |
 |  Copyright (C) 2017                                                      |
 |                                                                          |
 |         , __                 , __                                        |
 |        /|/  \               /|/  \                                       |
 |         | __/ _   ,_         | __/ _   ,_                                |
 |         |   \|/  /  |  |   | |   \|/  /  |  |   |                        |
 |         |(__/|__/   |_/ \_/|/|(__/|__/   |_/ \_/|/                       |
 |                           /|                   /|                        |
 |                           \|                   \|                        |
 |                                                                          |
 |      Enrico Bertolazzi                                                   |
 |      Dipartimento di Ingegneria Industriale                              |
 |      Universita` degli Studi di Trento                                   |
 |      email: enrico.bertolazzi@unitn.it                                   |
 |                                                                          |
\*--------------------------------------------------------------------------*/

///
/// file: lapack_wrapper_config.hh
///

#ifndef LAPACK_WRAPPER_CONFIG_HH
#define LAPACK_WRAPPER_CONFIG_HH

/*\
 ! values
 !  LAPACK_WRAPPER_USE_ACCELERATE, LAPACK_WRAPPER_USE_ATLAS, LAPACK_WRAPPER_USE_OPENBLAS, 
 !  LAPACK_WRAPPER_USE_LAPACK, LAPACK_WRAPPER_USE_MKL, lAPACK_WRAPPER_USE_BLASFEO
\*/
@@LAPACK_WRAPPER_USE@@

/*\
 ! define
 ! LAPACK_WRAPPER_DO_NOT_USE_SYSTEM_OPENBLAS
 ! if you want to use locally compiled openblas
\*/
@@LAPACK_WRAPPER_NOSYSTEM_OPENBLAS@@

// select computer architecture
#if defined(__APPLE__) && defined(__MACH__)
  // osx architecture
  #define LAPACK_WRAPPER_OS_OSX 1
  #if defined(__i386__)
    #define LAPACK_WRAPPER_ARCH32 1
  #elif defined(__x86_64__)
    #define LAPACK_WRAPPER_ARCH64 1
  #endif
#elif defined(__unix__)
  // linux architecture
  #define LAPACK_WRAPPER_OS_LINUX 1
  #if defined(__i386__)
    #define LAPACK_WRAPPER_ARCH32 1
  #elif defined(__x86_64__)
    #define LAPACK_WRAPPER_ARCH64 1
  #endif
#elif defined(_WIN32) || defined(WIN32) || defined(_WIN64) || defined(WIN64)
  // windows architecture
  #define LAPACK_WRAPPER_OS_WINDOWS 1
  #if defined(_M_X64) || defined(_M_AMD64)
    #define LAPACK_WRAPPER_ARCH64 1
  #else
    #define LAPACK_WRAPPER_ARCH32 1
  #endif
  #ifndef WIN32_LEAN_AND_MEAN
    #define WIN32_LEAN_AND_MEAN
  #endif
  #include <windows.h>
#else
  #error "unsupported OS!"
#endif

// check if compiler is C++11
#if (defined(_MSC_VER) &&  _MSC_VER >= 1800) || \
    (defined(__cplusplus) && __cplusplus > 199711L)
  #ifndef LAPACK_WRAPPER_DO_NOT_USE_CXX11
    #define LAPACK_WRAPPER_USE_CXX11
  #endif
#else
  // "LapackWrapper libray compiled without c++11 support, cannot use thread"
  // not C++11 compiler
  #ifndef nullptr
    #define nullptr NULL
  #endif
#endif

#define LAPACK_WRAPPER_PURE_VIRTUAL = 0
#if defined(LAPACK_WRAPPER_USE_CXX11) && !defined(LAPACK_WRAPPER_OS_WINDOWS)
  #define LAPACK_WRAPPER_OVERRIDE  override
  #define LAPACK_WRAPPER_CONSTEXPR constexpr
  #ifdef __clang__
    #pragma clang diagnostic ignored "-Wc++98-compat"
  #endif
#else
  #define LAPACK_WRAPPER_OVERRIDE
  #define LAPACK_WRAPPER_CONSTEXPR
#endif

#if defined(LAPACK_WRAPPER_OS_WINDOWS) && defined(_MSC_VER)
  // automatically include windows libs in visual studio
  #pragma comment(lib, "shell32.lib")
  #pragma comment(lib, "kernel32.lib")
  #pragma comment(lib, "advapi32.lib")
  #pragma comment(lib, "ws2_32.lib")
  #pragma comment(lib, "IPHLPAPI.lib")
  #pragma comment(lib, "Shlwapi.lib")
  #pragma comment(lib, "iphlpapi.lib")
#endif

#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++98-compat"
#pragma clang diagnostic ignored "-Wc++98-compat-pedantic"
#pragma clang diagnostic ignored "-Wold-style-cast"
#pragma clang diagnostic ignored "-Wswitch-enum"
#pragma clang diagnostic ignored "-Wdocumentation"
#pragma clang diagnostic ignored "-Wdocumentation-unknown-command"
#pragma clang diagnostic ignored "-Wglobal-constructors"
#pragma clang diagnostic ignored "-Wzero-as-null-pointer-constant"
#pragma clang diagnostic ignored "-Wweak-vtables"
#pragma clang diagnostic ignored "-Wshorten-64-to-32"
#pragma clang diagnostic ignored "-Wundefined-func-template"
#pragma clang diagnostic ignored "-Wdouble-promotion"
#pragma clang diagnostic ignored "-Wsigned-enum-bitfield"
#endif

#include "fort.hpp"
#include "rang.hpp"
#include "fmt/format.h"
#include "fmt/printf.h"

#ifndef BACKWARD_HAS_UNWIND
  #define BACKWARD_HAS_UNWIND 0
#endif
#ifndef BACKWARD_HAS_BACKTRACE
  #define BACKWARD_HAS_BACKTRACE 0
#endif
#ifndef BACKWARD_HAS_BACKTRACE_SYMBOL
  #define BACKWARD_HAS_BACKTRACE_SYMBOL 0
#endif

#include "backward.hpp"

#ifdef __clang__
#pragma clang diagnostic pop
#endif

#include <iostream>
#include <iomanip>
#include <sstream>
#include <stdexcept>

#ifndef LAPACK_WRAPPER_ERROR
  #define LAPACK_WRAPPER_ERROR(MSG) {      \
    std::ostringstream ost;                \
    ost << "On line: " << __LINE__         \
        << " file: " << __FILE__           \
        << '\n' << MSG << '\n';            \
    lapack_wrapper::backtrace( ost );      \
    throw std::runtime_error( ost.str() ); \
  }
#endif

#ifndef LAPACK_WRAPPER_ASSERT
  #define LAPACK_WRAPPER_ASSERT(COND,MSG) \
    if ( !(COND) ) LAPACK_WRAPPER_ERROR( "in lapack_wrapper::" << MSG )
#endif

#endif

///
/// eof: lapack_wrapper_config.hh
///
