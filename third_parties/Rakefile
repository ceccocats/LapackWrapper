require "rake"
require_relative "../Rakefile_common.rb"

task :default => [:install_osx] do
end

desc "install 3rd parties for OSX"
task :install_osx do
  FileUtils.cd "SuperLU"
  sh "rake install_osx"
  FileUtils.cd "../rang"
  sh "rake install_osx"
  FileUtils.cd "../libfort"
  sh "rake install_osx"
  FileUtils.cd "../backward-cpp"
  sh "rake install_osx"
  FileUtils.cd "../fmt"
  sh "rake install_osx"
  FileUtils.cd ".."
end

desc "install 3rd parties for LINUX"
task :install_linux do
  FileUtils.cd "SuperLU"
  sh "rake install_linux"
  FileUtils.cd "../rang"
  sh "rake install_linux"
  FileUtils.cd "../libfort"
  sh "rake install_linux"
  FileUtils.cd "../backward-cpp"
  sh "rake install_linux"
  FileUtils.cd "../fmt"
  sh "rake install_linux"
  FileUtils.cd ".."
end

desc "install 3rd parties for WINDOWS"
task :install_win, [:year, :bits] do |t,args|
  args.with_defaults(:year => "2017", :bits => "x64" )
  FileUtils.cd "SuperLU"
  sh "rake install_win[#{args.year},#{args.bits}]"
  FileUtils.cd "../rang"
  sh "rake install_win[#{args.year},#{args.bits}]"
  FileUtils.cd "../libfort"
  sh "rake install_win[#{args.year},#{args.bits}]"
  FileUtils.cd "../backward-cpp"
  sh "rake install_win[#{args.year},#{args.bits}]"
  FileUtils.cd "../fmt"
  sh "rake install_win[#{args.year},#{args.bits}]"
  FileUtils.cd "../OpenBlas"
  sh "rake install_win[#{args.year},#{args.bits}]"
  FileUtils.cd ".."
end

desc "clean 3rd parties for OSX"
task :clean_osx do
  FileUtils.cd "SuperLU"
  sh "rake clean_osx"
  FileUtils.cd "../rang"
  sh "rake clean_osx"
  FileUtils.cd "../libfort"
  sh "rake clean_osx"
  FileUtils.cd "../backward-cpp"
  sh "rake clean_osx"
  FileUtils.cd "../fmt"
  sh "rake clean_osx"
  FileUtils.cd "../OpenBlas"
  sh "rake clean_osx"
  FileUtils.cd ".."
end

desc "clean 3rd parties for LINUX"
task :clean_linux do
  FileUtils.cd "SuperLU"
  sh "rake clean_linux"
  FileUtils.cd "../rang"
  sh "rake clean_linux"
  FileUtils.cd "../libfort"
  sh "rake clean_linux"
  FileUtils.cd "../backward-cpp"
  sh "rake clean_linux"
  FileUtils.cd "../fmt"
  sh "rake clean_linux"
  FileUtils.cd "../OpenBlas"
  sh "rake clean_linux"
  FileUtils.cd ".."
  arch = `uname -m`.chomp #elimina a capo
  begin
    unless Dir.exist?( "/usr/local/include/openblas" ) then
      FileUtils.ln_sf "/usr/include/#{arch}-linux-gcc",
                      "/usr/local/include/openblas",
                      force: true
    end
  rescue
    puts "Failed to link /usr/include/#{arch}-linux-gcc".yellow
    puts "with /usr/local/include/openblas".yellow
    puts "lapack may fails".yellow
    puts "press return to continue".yellow
    input = STDIN.gets.strip
  end
end

desc "clean 3rd parties for WINDOWS"
task :clean_win do
  FileUtils.cd "SuperLU"
  sh "rake clean_win"
  FileUtils.cd "../rang"
  sh "rake clean_win"
  FileUtils.cd "../libfort"
  sh "rake clean_win"
  FileUtils.cd "../backward-cpp"
  sh "rake clean_win"
  FileUtils.cd "../fmt"
  sh "rake clean_win"
  FileUtils.cd "../OpenBlas"
  sh "rake clean_win"
  FileUtils.cd ".."
end
