require "rake"
require_relative "../../Rakefile_common.rb"

task :default => [:install_osx]

desc "download libfort lib"
task :download do
  cmd = "git clone --depth=1 https://github.com/seleznevae/libfort.git"
  system( cmd );
end

CMAKEDEFINES = ' --loglevel=WARNING '

desc "build libfort lib for osx"
task :build_osx => [:download] do
  FileUtils.cd      'libfort'
  FileUtils.rm_rf   'build'
  FileUtils.mkdir_p 'build'
  FileUtils.cd      'build'
  if COMPILE_DEBUG then
    sh 'cmake -DCMAKE_BUILD_TYPE:VAR=Debug -DCMAKE_INSTALL_PREFIX:PATH=../../lib ' + CMAKEDEFINES + '..'
    sh 'cmake --build . --clean-first --config Debug --target install '+PARALLEL+QUIET
    FileUtils.mv '../../lib/lib/libfort.a', "../../lib/lib/libfort_osx_static_debug.a"
  end
  sh 'cmake -DCMAKE_BUILD_TYPE:VAR=Release -DCMAKE_INSTALL_PREFIX:PATH=../../lib ' + CMAKEDEFINES + '..'
  sh 'cmake --build . --clean-first --config Release --target install '+PARALLEL+QUIET
  FileUtils.mv '../../lib/lib/libfort.a', "../../lib/lib/libfort_osx_static.a"
  FileUtils.cd '../..'
  Rake::Task[:install_common].invoke()
end

desc "build libfort lib for linux"
task :build_linux => [:download] do
  FileUtils.cd      'libfort'
  FileUtils.rm_rf   'build'
  FileUtils.mkdir_p 'build'
  FileUtils.cd      'build'
  if COMPILE_DEBUG then
    sh 'cmake -DCMAKE_BUILD_TYPE:VAR=Debug -DCMAKE_INSTALL_PREFIX:PATH=../../lib ' + CMAKEDEFINES + '..'
    sh 'cmake --build . --clean-first --config Debug --target install '+PARALLEL+QUIET
    FileUtils.mv '../../lib/lib/libfort.a', "../../lib/lib/libfort_linux_static_debug.a"
  end
  sh 'cmake -DCMAKE_BUILD_TYPE:VAR=Release -DCMAKE_INSTALL_PREFIX:PATH=../../lib ' + CMAKEDEFINES + '..'
  sh 'cmake --build . --clean-first --config Release --target install '+PARALLEL+QUIET
  FileUtils.mv '../../lib/lib/libfort.a', "../../lib/lib/libfort_linux_static.a"
  FileUtils.cd '../..'
  Rake::Task[:install_common].invoke()
end

desc "build libfort lib for windows"
task :build_win, [:year, :bits] => [:download] do |t, args|
  args.with_defaults(:year => "2017", :bits => "x64" )

  FileUtils.cd      'libfort'
  FileUtils.rm_rf   'build'
  FileUtils.mkdir_p 'build'
  FileUtils.cd      'build'
  if COMPILE_DEBUG then
    sh 'cmake -DCMAKE_BUILD_TYPE:VAR=Debug -DCMAKE_INSTALL_PREFIX:PATH=../../lib ' + CMAKEDEFINES + '..'
    sh 'cmake --build . --clean-first --config Debug --target install '+PARALLEL+QUIET
    FileUtils.mv '../../lib/lib/libfort.lib', "../../lib/lib/fort_win_#{args.bits}_static_debug.lib"
  end
  sh 'cmake -DCMAKE_BUILD_TYPE:VAR=Release -DCMAKE_INSTALL_PREFIX:PATH=../../lib ' + CMAKEDEFINES + '..'
  sh 'cmake --build . --clean-first --config Release --target install '+PARALLEL+QUIET
  FileUtils.mv '../../lib/lib/libfort.lib', "../../lib/lib/fort_win_#{args.bits}_static.lib"
  FileUtils.cd '../..'
  Rake::Task[:install_common].invoke()
end


task :install_common do |t, args|
  prefix = "../../lib3rd"
  puts "libfort copy files to #{prefix}"
  FileUtils.rm_rf   "#{prefix}/include"
  FileUtils.mkdir_p "#{prefix}/include"
  FileUtils.mkdir_p "#{prefix}/lib"
  Dir['lib/include/*'].each do |f|
    if File.file?(f) then
      puts "Copy header #{File.basename(f)}".green
      FileUtils.cp f, prefix+'/include/'+File.basename(f)
    end
  end
  Dir['lib/lib/*'].each do |f|
    if File.file?(f) then
      puts "Copy static lib #{File.basename(f)}".green
      FileUtils.cp f, prefix+'/lib/'+File.basename(f)
    end
  end
  FileUtils.cp 'libfort/LICENSE', '../../license/libfort_license.txt'
end

desc "install locally libfort lib for linux"
task :install_linux => [:build_linux] do
end

desc "install locally libfort lib for osx"
task :install_osx => [:build_osx] do
end

desc "install locally libfort lib for windows"
task :install_win, [:year, :bits] do |t, args|
  args.with_defaults(:year => "2017", :bits => "x64" )
  Rake::Task[:build_win].invoke(args.year, args.bits)
end

desc "clean libfort for linux"
task :clean_linux do
  FileUtils.rm_rf "lib"
  FileUtils.rm_rf "libfort"
end

desc "clean libfort for osx"
task :clean_osx do
  FileUtils.rm_rf "lib"
  FileUtils.rm_rf "libfort"
end

desc "clean libfort for windows"
task :clean_win do
  FileUtils.rm_rf "lib"
  FileUtils.rm_rf "libfort"
end
