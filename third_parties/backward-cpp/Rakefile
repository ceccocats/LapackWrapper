require "rake"
require_relative "../../Rakefile_common.rb"

task :default => [:install_osx]

desc "download backward-cpp lib"
task :download do
  cmd = "git clone --depth=1 git@github.com:bombela/backward-cpp.git"
  system( cmd );
end

CMAKEDEFINES = '-DCMAKE_CXX_STANDARD:VAR="11"  -DCMAKE_INSTALL_PREFIX:PATH=../lib --loglevel=WARNING '

desc "build backward-cpp lib for osx"
task :build_osx => [:download] do
  FileUtils.cd      'backward-cpp'
  FileUtils.rm_rf   'build'
  FileUtils.mkdir_p 'build'
  FileUtils.cd      'build'
  if COMPILE_DEBUG then
    sh 'cmake -DCMAKE_BUILD_TYPE:VAR=Debug ' + CMAKEDEFINES + '..'
    sh 'cmake --build . --clean-first --config Debug --target install '+PARALLEL+QUIET
    FileUtils.mv 'libbackward.a', "../lib/lib/libbackward_osx_static_debug.a"
  end
  sh 'cmake -DCMAKE_BUILD_TYPE:VAR=Release ' + CMAKEDEFINES + '..'
  sh 'cmake --build . --clean-first --config Release --target install '+PARALLEL+QUIET
  FileUtils.mv 'libbackward.a', "../lib/lib/libbackward_osx_static.a"
  FileUtils.cd '../..'
  Rake::Task[:install_common].invoke()
end

desc "build backward-cpp lib for linux"
task :build_linux => [:download] do
  FileUtils.cd      'backward-cpp'
  FileUtils.rm_rf   'build'
  FileUtils.mkdir_p 'build'
  FileUtils.cd      'build'
  if COMPILE_DEBUG then
    sh 'cmake -DCMAKE_BUILD_TYPE:VAR=Debug ' + CMAKEDEFINES + '..'
    sh 'cmake --build . --clean-first --config Debug --target install '+PARALLEL+QUIET
    FileUtils.mv 'libbackward.a', "../lib/lib/libbackward_linux_static_debug.a"
  end
  sh 'cmake -DCMAKE_BUILD_TYPE:VAR=Release ' + CMAKEDEFINES + '..'
  sh 'cmake --build . --clean-first --config Release --target install '+PARALLEL+QUIET
  FileUtils.mv 'libbackward.a', "../lib/lib/libbackward_linux_static.a"
  FileUtils.cd '../..'
  Rake::Task[:install_common].invoke()
end

desc "build backward-cpp lib for windows"
task :build_win, [:year, :bits] => [:download] do |t, args|
  args.with_defaults(:year => "2017", :bits => "x64" )

  FileUtils.cd      'backward-cpp'
  FileUtils.rm_rf   'build'
  FileUtils.mkdir_p 'build'
  FileUtils.cd      'build'
  if COMPILE_DEBUG then
    sh 'cmake -DCMAKE_BUILD_TYPE:VAR=Debug ' + CMAKEDEFINES + '..'
    sh 'cmake --build . --clean-first --config Debug --target install '+PARALLEL+QUIET
    FileUtils.mv '../lib/lib/libbackward.lib', "../lib/lib/backward_win_#{args.bits}_static_debug.lib"
  end
  sh 'cmake -DCMAKE_BUILD_TYPE:VAR=Release ' + CMAKEDEFINES + '..'
  sh 'cmake --build . --clean-first --config Release --target install '+PARALLEL+QUIET
  FileUtils.mv '../lib/lib/libbackward.lib', "../lib/lib/backward_win_#{args.bits}_static.lib"
  FileUtils.cd '../..'
  Rake::Task[:install_common].invoke()
end


task :install_common do |t, args|
  prefix = "../../lib3rd"
  puts "backward-cpp copy files to #{prefix}"
  FileUtils.mkdir_p "#{prefix}/include"
  FileUtils.mkdir_p "#{prefix}/lib"
  Dir['backward-cpp/lib/include/*'].each do |f|
    if File.file?(f) then
      puts "Copy header #{File.basename(f)}".green
      FileUtils.cp f, prefix+'/include/'+File.basename(f)
    end
  end
  Dir['backward-cpp/lib/lib/*'].each do |f|
    if File.file?(f) then
      puts "Copy static lib #{File.basename(f)}".green
      FileUtils.cp f, prefix+'/lib/'+File.basename(f)
    end
  end
  FileUtils.cp 'backward-cpp/LICENSE.txt', '../../license/backward_license.txt'
end

desc "install locally backward-cpp lib for linux"
task :install_linux => [:build_linux] do
end

desc "install locally backward-cpp lib for osx"
task :install_osx => [:build_osx] do
end

desc "install locally backward-cpp lib for windows"
task :install_win, [:year, :bits] do |t, args|
  args.with_defaults(:year => "2017", :bits => "x64" )
  Rake::Task[:build_win].invoke(args.year, args.bits)
end

desc "clean backward-cpp for linux"
task :clean_linux do
  FileUtils.rm_rf "lib"
  FileUtils.rm_rf "backward-cpp"
end

desc "clean backward-cpp for osx"
task :clean_osx do
  FileUtils.rm_rf "lib"
  FileUtils.rm_rf "backward-cpp"
end

desc "clean backward-cpp for windows"
task :clean_win do
  FileUtils.rm_rf "lib"
  FileUtils.rm_rf "backward-cpp"
end
